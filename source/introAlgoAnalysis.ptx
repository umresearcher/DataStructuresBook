<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-intro-analysis" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Introduction to Algorithm Analysis</title>

  <introduction>
    <p><alert>Why analyze algorithms? (develop arguments from Cormen)</alert></p> 
    <p>A learning goal of a 
    computer science education is to be able to compare multiple algorithms that solve a 
    particular problem. Suppose Algorithm <m>A</m> and Algorithm <m>B</m> solve a 
    specific problem. When we say Algorithm <m>A</m> and Algorithm <m>B</m> 
    solve a problem, it means that both Algorithm <m>A</m> and Algorithm <m>B</m> will give 
    the correct solution for any instance of the problem. The reason we compare two 
    algorithms for a particular problem is to choose the "optimal" algorithm for that problem. 
    What makes an algorithm "optimal" could be based on several metrics: for instance, it 
    could be time for implementing, testing and/or maintaining the algorithm, it could 
    be the time it takes for the algorithm to solve the problem, it could be the additional 
    memory that the algorithm uses while solving the problem. And so on.
    </p>

    <p>While you can compare two algorithms across multitude of factors, the time taken for 
    an algorithm to solve a problem is a good starting point, and is often very useful 
    (validate claim??). Now when we compare the time it takes for two algorithms to solve 
    a problem, we need to also consider the underlying computer system on which the algorithm
    will be run. For instance, a parallel computer can potentially run the statements in 
    an algorithm in parallel whereas a single core processor will run the statements in sequence.
    Also, we could measure the time taken for a parallel computer in multiple ways: it could
    be the sum of the time taken by each processor in the parallel computer (or) it could be 
    the wall clock time it takes from when the parallel computer starts solving the problem 
    till it gives the result. In the second case, two processors running in parallel and each 
    doing 10 seconds of computation in parallel will be considered as taking 10 seconds to 
    solve the problem. While several such variations are possible, a computer science student 
    must know how to analyze the time it takes on a single processor computer. A student with
    this knowledge is well-equipped to analyze the running time under other computer system 
    architectures as well, as needed.
    </p>

    <p>Even across single processor computers, your processor could support different 
    operations. For instance, we have 
    specialized chips for AI (check !!). In that case, an operation that 
    takes several steps on a processor could be done on 1 step on a different architecture. 
    Another example is <m>2^n</m> can be done in one processor by left shift of 1 by <m>n</m> 
    bits, or by looping <m>n</m> times and multiplying by 2 each time. Once again, while 
    these different processor architectures and supported basic operations are important
    for analysis, we will make simplifying assumptions that are commonplace (check claim).  
    </p>

    <p>We hope that you are convinced you need to learn how to analyze algorithms. There are
    tools that we use in computer science to analyze algorithms. Before we study these
    tools, let us examine an algorithm for a simple problem: find the smallest value 
    given an array of numbers.
    </p>

  </introduction>

  <!-- include sections -->
  <xi:include href="sec-findMin.ptx" />
  <xi:include href="sec-analysisTools.ptx" />


</chapter>