<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-findMin" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Finding Minimum Element in an Array</title>

  <p> Consider an array of <m>n</m> numbers, <m>A[1\ldots n]</m>. We need to find the
  smallest among <m>A[1\ldots n]</m>.</p>

  <p>The above is probably one of the first programs you might have written when learning 
  collections (or) arrays. The computational way of thinking about 
  this problem is: how to we find the smallest among <m>n</m> numbers when we see the 
  numbers one at a time. We typically do this by examining each number one at a time
  and keeping track of the smallest among the numbers seen so far (using a "scratch" 
  variable). Let us now write pseudo-code for this function.
  </p> 

  <!--<p>The above is probably one of the first programs you might have written. The algorithm
  works typically as: We will go through the numbers in <m>A[1\ldots n]</m>, one by one, and 
  we will use a variable for keeping track of the smallest among the values we have 
  examined so far in <m>A[1\ldots n]</m>. The details are as:</p>

  <p>
    <ol>
      <li><p>let currMin be the variable we use for keeping track of the smallest so far. We 
      first initialize it to A[1].</p></li>
      <li><p>Now we loop looking at elements A[2] to A[n]. For this we will use a counter 
      variable, say i. i starts from 2 and goes to n.
        <ol>
          <li><p>Consider an iteration where i has the value, say k. In this iteration, we will
          compare A[k] with value in currMin, and we will update currMin if A[k] is &lt; currMin.
          We do this for all values of i from 2 to n.  
            </p></li>
        </ol>
      </p></li>
      <li><p>At the end of the loop, we have examined all values A[1..n], and currMin has 
      the smallest among these values. So we return currMin as the result of the function.
      </p></li>
    </ol>
  </p>

<p>The above is an algorithm for the given problem. Let us now drag the blocks given (there are
some incorrect blocks given as well, which you should not use) for the above algorithm.
</p> -->

<exercise label="findMin-pseudoCodeParsons" adaptive="yes">
  <title>Try yourself: Find Min</title>
  <idx>findMin</idx>
  <statement>
  <p>We are going to write an algorithm for the findMin problem. 
  Consider an array of <m>n</m> numbers, <m>A[1\ldots n]</m>. We need to find the
  smallest among <m>A[1\ldots n]</m>.</p>
  <p>For this, we will write a function, say findMin defined as follows:
  <program>
    findMin(A):
      Input: A[1...n] of n numbers
      Returns: A number, A[i] such that A[i] &lt;= A[j], for all 1 &lt;= j &lt;= n
  </program>
  Drag the blocks to form the body of your function.
  </p>
  </statement>
  <blocks>
  <block order="2" correct="yes"><p>initialize currMin = A[1].</p></block>
  <block order="3">
  <choice>
  <p>
    Loop over i values from 0 to n.
  </p>
  </choice>
  <choice correct="yes">
  <p>
    Loop over i values from 2 to n.
  </p>
  </choice>
  <choice>
  <p>
    Loop over i values from 1 to n-1.
  </p>
  </choice>
  </block>
  <block order="1" correct="no">
  <p>
    return A[1].
  </p>
  </block>
  <block order="4" correct="yes"><p>For each value of i in the iteration, set currMin = A[i] 
  if A[i] &lt; currMin</p></block>
  <block order="5" correct="yes"><p>return currMin</p></block>
  <block order="6" correct="no"><p>return A[n]</p></block>
  </blocks>
  <!--<hint>
    <p>
      Dorothy will not be much help with this proof.
    </p>
  </hint> -->
</exercise>

<p>
  Using our pseudo-code notations, we write the above algorithm as follows.
<program>
  findMin(A):
    Input: A[1...n] of n numbers
    Output: A number, A[i] such that A[i] &lt;= A[j], for all 1 &lt;= j &lt;= n

    1. currMin = A[1]
    2. for i = 2 to n
    3.   if A[i] &lt; currMin
    4.     currMin = A[i]
    5. return currMin
</program>
</p>

<p>Let us implement the algorithm above in your favorite programming language</p>

<!-- <program interactive="activecode" language="python" line-numbers="yes" 
    label="program-populateArray" xml:id="program-populateArray">
  <preamble visible="no">
  import random
  </preamble>
  <code>
  def populateArr(n, st, end):
    # populate an arr of n integers randomly chosen from the range [st, end]
    # the n integers will be in indexes 1 .. n. It will set A[0] = -1
    # preferably use this to populate an array with n non-negative integers. In other words:
    # we know end &lt;= st
    # We should ideally have st &gt;= 0
    </code>
    <postamble visible="no">
    A = [random.randint(st, end) for _ in range(n)]
    # Insert the number -1 at the 0th index (as we ignore the 0th index)
    A.insert(0, -1)
    return A
    </postamble>
</program> -->

<program interactive="activecode" language="python" line-numbers="yes" 
    label="program-findMin-python">

    <preamble visible="no">
    import random
    def populateArr(n, st, end):
      # populate an arr of n integers randomly chosen from the range [st, end]
      # the n integers will be in indexes 1 .. n. It will set A[0] = -1
      # preferably use this to populate an array with n non-negative integers. In other words:
      # we know end &lt;= st
      # We should ideally have st &gt;= 0
      A = [random.randint(st, end) for _ in range(n)]
      # Insert the number -1 at the 0th index (as we ignore the 0th index)
      A.insert(0, -1)
      return A
    </preamble>

    <code>
    def findMin(A):
      # TODO - initialize currMin to be A[1]
      # TODO - Loop for values of i from 2 to n
      # TODO -    update currMin as needed
      # TODO - return currMin
      return 1

    # Use the function. Initialize the array
    n = 100  # size of the array. default set to 100. update as desired
    # range of values. default set to [1, 100000]. update as desired
    st = 1
    end = 100000
    </code>

    <postamble visible="yes">
    A = populateArr(n, st, end)
    print(findMin(A))
    </postamble>
    <!-- <postamble visible="yes">
    <code>
    #call the function, and display the results
    print(findMin(A))
    </code>
    #</postamble> -->

</program>

</section>